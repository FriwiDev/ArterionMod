package me.friwi.arterion.client;

import java.util.List;

import me.friwi.arterion.client.data.FriendlyPlayerList;
import me.friwi.arterion.client.data.ModValueEnum;
import me.friwi.arterion.client.gui.ChatModifier;
import me.friwi.arterion.client.gui.ChestMenuModifier;
import me.friwi.arterion.client.gui.EscapeMenuModifier;
import me.friwi.arterion.client.gui.RenderIngameGuiHandler;
import me.friwi.arterion.client.gui.util.HeadCacheUtil;
import me.friwi.arterion.client.labymod.LabymodIngameGuiHandler;
import me.friwi.arterion.client.labymod.LabymodPluginMessageListener;
import me.friwi.arterion.client.network.client.ConnectionHandler;
import me.friwi.arterion.client.network.client.ModConnection;
import me.friwi.arterion.client.network.client.PacketListenerClient;
import me.friwi.arterion.client.network.client.PacketReceiver;
import me.friwi.arterion.client.network.packet.Packet01ModVersion;
import net.labymod.api.LabyModAddon;
import net.labymod.settings.elements.SettingsElement;

public class LabyAddon extends LabyModAddon {
	/**
     * Called when the addon gets enabled
     */
    @Override
    public void onEnable() {
    	getApi().registerForgeListener( new LabymodIngameGuiHandler());
    	getApi().registerForgeListener( new ChestMenuModifier());
    	getApi().registerForgeListener( new ChatModifier());
    	new ModConnection(new PacketListenerClient());
    	HeadCacheUtil.startWorkerThread();
    	getApi().getEventManager().registerOnJoin(data->{
    		FriendlyPlayerList.clear();
			System.out.println("Sending welcome packet!");
			ModConnection.sendPacket(new Packet01ModVersion(ModConnection.PROTOCOL_VERSION));
    	});
    	getApi().getEventManager().registerOnQuit(data->{
    		ModValueEnum.IS_ARTERION.setValue(0);
    	});
    	getApi().getEventManager().register(new LabymodPluginMessageListener());
    	//TODO Config
    }

    /**
     * Called when the addon gets disabled
     */
    @Override
    public void onDisable() {
    	
    }

    /**
     * Called when this addon's config was loaded and is ready to use
     */
    @Override
    public void loadConfig() {

    }

    /**
     * Called when the addon's ingame settings should be filled
     *
     * @param subSettings a list containing the addon's settings' elements
     */
    @Override
    protected void fillSettings( List<SettingsElement> subSettings ) {

    }

}
